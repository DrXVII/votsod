#############################
OBJECTIVES FOR VERSION 0.02.0
#############################
- Prepare the system design for further development.
- [ ] rename Tile_Empty class into Tile_Floor to better represent it's
  functionality.
- [ ] return a trully Tile_Empty when get_tile tries to probe a non
  existant tile (create Tile_Empty as a special tile type)
- [ ] use smart arrays instead of raw arrays
- [ ] optimise vector array handling for random access object deletion
  (i.e. destroy the object in the vector and move the one at the end as opposed
  to rearranging the entire vector... maybe there's a better solution)

#############################
OBJECTIVES FOR VERSION 0.01.0
#############################

- [x] Organise project repository
- [x] Create an initial design for the engine core
- [x] Refactor and review old code
- [x] Flesh out engine core
-- [x] housekeeping
-- [x] core mechanics
-- [x] basic AI/mobs
-- [x] basic UI
-- [x] debug log functionality
- [x] basic random level generation
- [x] take care of lose ends (TODO)

=====
Steps
=====

-------------------------------
[x] Organise project repository
-------------------------------
- [x] check and throw out the unnecessary doc files left over form asciiworld
-- [x] text docs, ideas, etc
-- [x] xmind project maps
-- [x] diagrams
- [x] reorganise code files in repo
-- [x] deicide on the repo structure
-- [x] create a makefile

------------------------------------------------
[x] Create an initial design for the engine core
------------------------------------------------
- [x] create a basic dia diagram to have a visualisation and work from there

--------------------------------
[x] Refactor and review old code
--------------------------------
- [x] refactor code distribution to comply with K&R-Stroustrup style
- [x] refactor naming to comply with K&R-Stroustrup style
- [x] review the code and remember the old work and loose ends

-------------------------
[x] Flesh out engine core
-------------------------
(the idea is to make a reusable engine skeleton)

# [x] housekeeping
- [x] refactor code. The current style is inconsistent and quite far from ISO,
	which suggests K&R

# [x] core mechanics
- [x] reintroduce wall collisions
-- [x] create a System class to serve as higher level handler of procesess
-- [x] implement actor movement handling in the Map class
- [x] implement treating of the main char as one of the char objects in the map
	and render as such. (Throw away the hard-stamped '@' at middle of view-port
	placeholder)
-- [x] Char array in map should contain the main character as well
-- [x] reconfigure viewport accordingly

# [x] basic AI/mobs
- [x] basic mobs
-- [x] introduce an AI-less mob (let's consider it a training dummy :D )
-- [x] implement basic mob AI (only homing for now)

# [x] basic UI
- [x] display hp (later other common information) on the sidebar

# [x] debug log functionality

---------------------------------
[x] basic random level generation
---------------------------------
- generate a random level (for now just some rooms connected with corridors)
-- [x] room generation
-- [x] randomise room generation
-- [x] random corridors, most leading to a room
--- [x] random corridor passageway
--- [x] corridor walls
--- [x] bending corridors
--- [x] 9/10 chance of a room at the end of corridor
-- [x] level feature overlapping prevention
-- [x] ensure level element accessability

---------------------------------
[x] take care of lose ends (TODO)
---------------------------------
- [x] fix quirks in random level generation
-- [x] inaccessible rooms
-- [x] random crashing
- [x] finish implementing random level generation
-- [x] generate a corridor to random direction and room at the end of it
-- [x] generate corridor walls
- [x] implement a logfile for debugging (instead of random prints)
- continue implementing random level generation
-- [x] test the placement of a random tile outside of the generated room
-- [x] modify actor placement logic to prevent placing actors on impassable or
   non-existent tiles
-- [x] implement the "random" in random room generator
-- [x] generate walls around random rooms
